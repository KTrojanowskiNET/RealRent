// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RentData;

namespace RentData.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20200729230130_AgencyPropsAndTagHelper")]
    partial class AgencyPropsAndTagHelper
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("RentModel.Models.Advertisement", b =>
                {
                    b.Property<int>("AdvertisementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsPromoted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PropertyType")
                        .HasColumnType("int");

                    b.Property<string>("UserRef")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("AdvertisementId");

                    b.HasIndex("UserRef");

                    b.ToTable("Advertisements");
                });

            modelBuilder.Entity("RentModel.Models.Agency", b =>
                {
                    b.Property<int>("AgencyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("AdvertisementId")
                        .HasColumnType("int");

                    b.Property<int?>("AdvertisementId1")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Slogan")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AgencyId");

                    b.HasIndex("AdvertisementId")
                        .IsUnique()
                        .HasFilter("[AdvertisementId] IS NOT NULL");

                    b.HasIndex("AdvertisementId1");

                    b.ToTable("Agencies");

                    b.HasData(
                        new
                        {
                            AgencyId = 1,
                            Address = "Wrzosowa 7/99",
                            Name = "Agency A",
                            PhoneNumber = "111 627 199",
                            Slogan = "Slogan A"
                        },
                        new
                        {
                            AgencyId = 2,
                            Address = "Wrzosowa 7/999",
                            Name = "Agency B",
                            PhoneNumber = "441 127 959",
                            Slogan = "Slogan B"
                        });
                });

            modelBuilder.Entity("RentModel.Models.Apartment", b =>
                {
                    b.Property<int>("ApartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Advance")
                        .HasColumnType("float");

                    b.Property<int?>("AdvertisementId")
                        .HasColumnType("int");

                    b.Property<string>("AgencyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ConstructionYear")
                        .HasColumnType("int");

                    b.Property<int>("Floor")
                        .HasColumnType("int");

                    b.Property<bool>("FromAgency")
                        .HasColumnType("bit");

                    b.Property<string>("FullDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("HaveBalcony")
                        .HasColumnType("bit");

                    b.Property<bool>("HaveBasement")
                        .HasColumnType("bit");

                    b.Property<bool>("HaveFurnishings")
                        .HasColumnType("bit");

                    b.Property<string>("MainImageName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("MainPageDisplay")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberOfRooms")
                        .HasColumnType("int");

                    b.Property<string>("OwnerID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("PropertyType")
                        .HasColumnType("int");

                    b.Property<string>("ShortDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("SquareMetrage")
                        .HasColumnType("float");

                    b.HasKey("ApartmentId");

                    b.HasIndex("AdvertisementId")
                        .IsUnique()
                        .HasFilter("[AdvertisementId] IS NOT NULL");

                    b.ToTable("Apartments");

                    b.HasData(
                        new
                        {
                            ApartmentId = 1,
                            Address = "Przemiarki 2/1",
                            Advance = 2500.0,
                            City = "Kraków",
                            ConstructionYear = 1998,
                            Floor = 1,
                            FromAgency = false,
                            FullDescription = "Przykładowy opis mieszkania na potrzeby testowania aplikacji",
                            HaveBalcony = false,
                            HaveBasement = false,
                            HaveFurnishings = false,
                            MainImageName = "PhotoName",
                            MainPageDisplay = false,
                            Name = "Mieszkanie w centrum",
                            NumberOfRooms = 3,
                            Price = 1600.0,
                            PropertyType = 1,
                            SquareMetrage = 64.0
                        },
                        new
                        {
                            ApartmentId = 2,
                            Address = "Kunickiego 2/1",
                            Advance = 2000.0,
                            City = "Wrocław",
                            ConstructionYear = 1995,
                            Floor = 3,
                            FromAgency = false,
                            FullDescription = "Przykładowy opis mieszkania na potrzeby testowania aplikacji",
                            HaveBalcony = false,
                            HaveBasement = false,
                            HaveFurnishings = false,
                            MainImageName = "PhotoName",
                            MainPageDisplay = false,
                            Name = "Mieszkanie na przedmieściu",
                            NumberOfRooms = 2,
                            Price = 1300.0,
                            PropertyType = 1,
                            SquareMetrage = 54.0
                        });
                });

            modelBuilder.Entity("RentModel.Models.CommercialSpace", b =>
                {
                    b.Property<int>("CommercialSpaceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Advance")
                        .HasColumnType("float");

                    b.Property<int?>("AdvertisementId")
                        .HasColumnType("int");

                    b.Property<string>("AgencyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ConstructionYear")
                        .HasColumnType("int");

                    b.Property<int>("Floor")
                        .HasColumnType("int");

                    b.Property<bool>("FromAgency")
                        .HasColumnType("bit");

                    b.Property<string>("FullDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LocalType")
                        .HasColumnType("int");

                    b.Property<string>("MainImageName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("MainPageDisplay")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberOfRooms")
                        .HasColumnType("int");

                    b.Property<string>("OwnerID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("PropertyType")
                        .HasColumnType("int");

                    b.Property<string>("ShortDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("SquareMetrage")
                        .HasColumnType("float");

                    b.HasKey("CommercialSpaceId");

                    b.HasIndex("AdvertisementId")
                        .IsUnique()
                        .HasFilter("[AdvertisementId] IS NOT NULL");

                    b.ToTable("CommercialSpaces");

                    b.HasData(
                        new
                        {
                            CommercialSpaceId = 1,
                            Address = "Leśna 2/1",
                            Advance = 700.0,
                            City = "Katowice",
                            ConstructionYear = 2002,
                            Floor = 0,
                            FromAgency = false,
                            FullDescription = "Przykładowy opis lokalu użytkowego na potrzeby testowania aplikacji",
                            LocalType = 1,
                            MainImageName = "PhotoName",
                            MainPageDisplay = false,
                            Name = "Biuro rachunkowe",
                            NumberOfRooms = 0,
                            Price = 1200.0,
                            PropertyType = 2,
                            SquareMetrage = 150.0
                        },
                        new
                        {
                            CommercialSpaceId = 2,
                            Address = "Zana 2/1",
                            Advance = 500.0,
                            City = "Katowice",
                            ConstructionYear = 2008,
                            Floor = 0,
                            FromAgency = false,
                            FullDescription = "Przykładowy opis lokalu użytkowego na potrzeby testowania aplikacji",
                            LocalType = 2,
                            MainImageName = "PhotoName",
                            MainPageDisplay = false,
                            Name = "Sala konferencyjna",
                            NumberOfRooms = 0,
                            Price = 1000.0,
                            PropertyType = 2,
                            SquareMetrage = 80.0
                        });
                });

            modelBuilder.Entity("RentModel.Models.Home", b =>
                {
                    b.Property<int>("HomeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Advance")
                        .HasColumnType("float");

                    b.Property<int?>("AdvertisementId")
                        .HasColumnType("int");

                    b.Property<string>("AgencyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ConstructionYear")
                        .HasColumnType("int");

                    b.Property<bool>("FromAgency")
                        .HasColumnType("bit");

                    b.Property<string>("FullDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("HaveFurnishings")
                        .HasColumnType("bit");

                    b.Property<bool>("HaveGarage")
                        .HasColumnType("bit");

                    b.Property<string>("MainImageName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("MainPageDisplay")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberOfFloors")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfRooms")
                        .HasColumnType("int");

                    b.Property<string>("OwnerID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("PropertyType")
                        .HasColumnType("int");

                    b.Property<string>("ShortDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("SquareMetrage")
                        .HasColumnType("float");

                    b.Property<double>("TotalArea")
                        .HasColumnType("float");

                    b.HasKey("HomeId");

                    b.HasIndex("AdvertisementId")
                        .IsUnique()
                        .HasFilter("[AdvertisementId] IS NOT NULL");

                    b.ToTable("Homes");

                    b.HasData(
                        new
                        {
                            HomeId = 1,
                            Address = "Wiązów 3/9",
                            Advance = 4000.0,
                            City = "Warszawa",
                            ConstructionYear = 2000,
                            FromAgency = false,
                            FullDescription = "Przykładowy opis domu na potrzeby testowania aplikacji",
                            HaveFurnishings = false,
                            HaveGarage = false,
                            MainImageName = "PhotoName",
                            MainPageDisplay = false,
                            Name = "Dom nad jeziorem",
                            NumberOfFloors = 2,
                            NumberOfRooms = 6,
                            Price = 2500.0,
                            PropertyType = 3,
                            SquareMetrage = 140.0,
                            TotalArea = 200.0
                        },
                        new
                        {
                            HomeId = 2,
                            Address = "Koziołka 3/9",
                            Advance = 3000.0,
                            City = "Pacanów",
                            ConstructionYear = 2002,
                            FromAgency = false,
                            FullDescription = "Przykładowy opis domu na potrzeby testowania aplikacji",
                            HaveFurnishings = false,
                            HaveGarage = false,
                            MainImageName = "PhotoName",
                            MainPageDisplay = false,
                            Name = "Dom w centrum",
                            NumberOfFloors = 1,
                            NumberOfRooms = 4,
                            Price = 2100.0,
                            PropertyType = 3,
                            SquareMetrage = 90.0,
                            TotalArea = 160.0
                        });
                });

            modelBuilder.Entity("RentModel.Models.Room", b =>
                {
                    b.Property<int>("RoomId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Advance")
                        .HasColumnType("float");

                    b.Property<int?>("AdvertisementId")
                        .HasColumnType("int");

                    b.Property<string>("AgencyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Agent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ConstructionYear")
                        .HasColumnType("int");

                    b.Property<int>("Floor")
                        .HasColumnType("int");

                    b.Property<bool>("FromAgency")
                        .HasColumnType("bit");

                    b.Property<string>("FullDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("HaveFurnishings")
                        .HasColumnType("bit");

                    b.Property<string>("MainImageName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("MainPageDisplay")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NumberOfFlatmates")
                        .HasColumnType("int");

                    b.Property<string>("OwnerID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("PropertyType")
                        .HasColumnType("int");

                    b.Property<string>("ShortDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("SquareMetrage")
                        .HasColumnType("float");

                    b.Property<double>("TotalArea")
                        .HasColumnType("float");

                    b.HasKey("RoomId");

                    b.HasIndex("AdvertisementId")
                        .IsUnique()
                        .HasFilter("[AdvertisementId] IS NOT NULL");

                    b.ToTable("Rooms");

                    b.HasData(
                        new
                        {
                            RoomId = 1,
                            Address = "Słowackiego 2/5",
                            Advance = 750.0,
                            City = "Gliwice",
                            ConstructionYear = 1992,
                            Floor = 3,
                            FromAgency = false,
                            FullDescription = "Przykładowy opis pokoju na potrzeby testowania aplikacji",
                            HaveFurnishings = false,
                            MainImageName = "PhotoName",
                            MainPageDisplay = false,
                            Name = "Przytulny pokój",
                            NumberOfFlatmates = 1,
                            Price = 500.0,
                            PropertyType = 0,
                            SquareMetrage = 12.0,
                            TotalArea = 0.0
                        },
                        new
                        {
                            RoomId = 2,
                            Address = "Słoneczna 1/2",
                            Advance = 800.0,
                            City = "Lublin",
                            ConstructionYear = 1995,
                            Floor = 2,
                            FromAgency = false,
                            FullDescription = "Przykładowy opis pokoju na potrzeby testowania aplikacji",
                            HaveFurnishings = false,
                            MainImageName = "PhotoName",
                            MainPageDisplay = false,
                            Name = "Pokój w Lublinie",
                            NumberOfFlatmates = 2,
                            Price = 570.0,
                            PropertyType = 0,
                            SquareMetrage = 16.0,
                            TotalArea = 0.0
                        });
                });

            modelBuilder.Entity("RentModel.Models.AppUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConfirmPassword")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("RememberMe")
                        .HasColumnType("bit");

                    b.HasDiscriminator().HasValue("AppUser");

                    b.HasData(
                        new
                        {
                            Id = "1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6e75bba8-4afd-4993-a264-86ecfd913eab",
                            Email = "boni@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumber = "123 233 122",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ad359009-cfb0-4a74-b584-19bdb96ef55c",
                            TwoFactorEnabled = false,
                            UserName = "Boni",
                            Address = "Młotkowa 2/7",
                            ConfirmPassword = "bonih",
                            FirstName = "Bonifacy",
                            LastName = "Serpentyna",
                            Password = "bonih",
                            RememberMe = false
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RentModel.Models.Advertisement", b =>
                {
                    b.HasOne("RentModel.Models.AppUser", "User")
                        .WithMany("Advertisements")
                        .HasForeignKey("UserRef")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RentModel.Models.Agency", b =>
                {
                    b.HasOne("RentModel.Models.Advertisement", null)
                        .WithOne("Agency")
                        .HasForeignKey("RentModel.Models.Agency", "AdvertisementId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("RentModel.Models.Advertisement", "Advertisement")
                        .WithMany()
                        .HasForeignKey("AdvertisementId1");
                });

            modelBuilder.Entity("RentModel.Models.Apartment", b =>
                {
                    b.HasOne("RentModel.Models.Advertisement", "Advertisement")
                        .WithOne("Apartment")
                        .HasForeignKey("RentModel.Models.Apartment", "AdvertisementId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.OwnsMany("RentModel.Models.Photo", "Images", b1 =>
                        {
                            b1.Property<int>("ApartmentId")
                                .HasColumnType("int");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("PhotoName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("PhotoPath")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("ApartmentId", "Id");

                            b1.ToTable("Apartments_Images");

                            b1.WithOwner()
                                .HasForeignKey("ApartmentId");
                        });

                    b.OwnsOne("RentModel.Models.Photo", "MainImage", b1 =>
                        {
                            b1.Property<int>("ApartmentId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("PhotoName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("PhotoPath")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("ApartmentId");

                            b1.ToTable("Apartments");

                            b1.WithOwner()
                                .HasForeignKey("ApartmentId");
                        });
                });

            modelBuilder.Entity("RentModel.Models.CommercialSpace", b =>
                {
                    b.HasOne("RentModel.Models.Advertisement", "Advertisement")
                        .WithOne("CommercialSpace")
                        .HasForeignKey("RentModel.Models.CommercialSpace", "AdvertisementId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.OwnsMany("RentModel.Models.Photo", "Images", b1 =>
                        {
                            b1.Property<int>("CommercialSpaceId")
                                .HasColumnType("int");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("PhotoName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("PhotoPath")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("CommercialSpaceId", "Id");

                            b1.ToTable("CommercialSpaces_Images");

                            b1.WithOwner()
                                .HasForeignKey("CommercialSpaceId");
                        });

                    b.OwnsOne("RentModel.Models.Photo", "MainImage", b1 =>
                        {
                            b1.Property<int>("CommercialSpaceId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("PhotoName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("PhotoPath")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("CommercialSpaceId");

                            b1.ToTable("CommercialSpaces");

                            b1.WithOwner()
                                .HasForeignKey("CommercialSpaceId");
                        });
                });

            modelBuilder.Entity("RentModel.Models.Home", b =>
                {
                    b.HasOne("RentModel.Models.Advertisement", "Advertisement")
                        .WithOne("Home")
                        .HasForeignKey("RentModel.Models.Home", "AdvertisementId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.OwnsMany("RentModel.Models.Photo", "Images", b1 =>
                        {
                            b1.Property<int>("HomeId")
                                .HasColumnType("int");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("PhotoName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("PhotoPath")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("HomeId", "Id");

                            b1.ToTable("Homes_Images");

                            b1.WithOwner()
                                .HasForeignKey("HomeId");
                        });

                    b.OwnsOne("RentModel.Models.Photo", "MainImage", b1 =>
                        {
                            b1.Property<int>("HomeId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("PhotoName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("PhotoPath")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("HomeId");

                            b1.ToTable("Homes");

                            b1.WithOwner()
                                .HasForeignKey("HomeId");
                        });
                });

            modelBuilder.Entity("RentModel.Models.Room", b =>
                {
                    b.HasOne("RentModel.Models.Advertisement", "Advertisement")
                        .WithOne("Room")
                        .HasForeignKey("RentModel.Models.Room", "AdvertisementId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.OwnsMany("RentModel.Models.Photo", "Images", b1 =>
                        {
                            b1.Property<int>("RoomId")
                                .HasColumnType("int");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("PhotoName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("PhotoPath")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("RoomId", "Id");

                            b1.ToTable("Rooms_Images");

                            b1.WithOwner()
                                .HasForeignKey("RoomId");
                        });

                    b.OwnsOne("RentModel.Models.Photo", "MainImage", b1 =>
                        {
                            b1.Property<int>("RoomId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("PhotoName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("PhotoPath")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("RoomId");

                            b1.ToTable("Rooms");

                            b1.WithOwner()
                                .HasForeignKey("RoomId");
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
